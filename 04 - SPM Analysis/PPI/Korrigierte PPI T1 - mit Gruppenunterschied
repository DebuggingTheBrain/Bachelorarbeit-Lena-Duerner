% =========================================================================
% Seed-to-Seed 2nd-Level Analyse (asymmetrisch, spiderbird-Kontrast)
% Gruppenvergleich: rTMS-React vs. Placebo-React
% Visualisierung: Heatmaps mit FDR- und p<.05-Umrandung
% =========================================================================

% === Pfade anpassen ===
dataDir = 'F:\FMRIPREPRESULTFINAL\TMFC_T1\ROI_sets\angst\gPPI\ROI_to_ROI\asymmetrical';
roiDir  = 'F:\FMRIPREPRESULTFINAL\TMFC_T1\ROI_sets\angst\Masked_ROIs';

% === Kontrastdateien finden ===
files = dir(fullfile(dataDir, '*Contrast_0005*spiderbird*.mat'));
nSub = numel(files);
fprintf('Gefundene Kontrastdateien: %d\n', nSub);

if nSub == 0
    error('Keine passenden Kontrastdateien gefunden.');
end

% === Beispiel-Datei laden ===
example = load(fullfile(dataDir, files(1).name));
fn = fieldnames(example);
matrix = example.(fn{1});
[nSeeds1, nSeeds2] = size(matrix);

if nSeeds1 ~= nSeeds2
    warning('Matrix ist nicht quadratisch (%d x %d)', nSeeds1, nSeeds2);
end

% === ROI-Dateien laden und bereinigen ===
roiFilesStruct = [ ...
    dir(fullfile(roiDir, '**', '*_masked.nii')); ...
    dir(fullfile(roiDir, '**', '*_masked.nii.gz'))];
roiFileNames = sort({roiFilesStruct.name});

roiLabels = cell(numel(roiFileNames), 1);
for i = 1:numel(roiFileNames)
    fname = roiFileNames{i};
    fname = regexprep(fname, '\.nii(\.gz)?$', '');
    fname = regexprep(fname, '_masked$', '');
    fname = regexprep(fname, '_in_MNI2009c$', '');
    roiLabels{i} = fname;
end

fprintf('\nAlle %d verfügbaren ROIs werden verwendet:\n', numel(roiLabels));
disp(roiLabels);

% === Gruppenzuordnung (Subject_#### → Gruppe) ============================
groupTable = {
    'Subject_0001', 'rTMS-React';
    'Subject_0002', 'Placebo-React';
    'Subject_0003', 'rTMS-React';
    'Subject_0004', 'Placebo-React';
    'Subject_0005', 'Placebo-React';
    'Subject_0006', 'rTMS-React';
    'Subject_0007', 'rTMS-React';
    'Subject_0008', 'Placebo-React';
    'Subject_0009', 'Placebo-React';
    'Subject_0010', 'rTMS-React';
    'Subject_0011', 'rTMS-React';
    'Subject_0012', 'Placebo-React';
    'Subject_0013', 'rTMS-React';
    'Subject_0014', 'Placebo-React';
    'Subject_0015', 'Placebo-React';
    'Subject_0016', 'rTMS-React';
    'Subject_0017', 'rTMS-React';
    'Subject_0018', 'Placebo-React';
    'Subject_0019', 'rTMS-React';
    'Subject_0020', 'Placebo-React';
    'Subject_0021', 'Placebo-React';
    'Subject_0022', 'rTMS-React';
};

subjectNames = cell(nSub,1);
groupLabels  = cell(nSub,1);

for i = 1:nSub
    [~, fname] = fileparts(files(i).name);
    match = regexp(fname, '(Subject_\d+)', 'tokens', 'once');
    if isempty(match)
        error('Kann Subject-Code in Dateiname "%s" nicht extrahieren.', fname);
    end
    subjectNames{i} = match{1};
    idx = find(strcmp(groupTable(:,1), match{1}));
    if isempty(idx)
        error('Subject %s ist keiner Gruppe zugewiesen.', match{1});
    end
    groupLabels{i} = groupTable{idx,2};
end

groupLabels = string(groupLabels);
grp1_idx = strcmp(groupLabels, 'Placebo-React');
grp2_idx = strcmp(groupLabels, 'rTMS-React');
fprintf('Placebo-React: %d Probanden, rTMS-React: %d Probanden\n', sum(grp1_idx), sum(grp2_idx));

% === Matrizen laden ===
nROIs = numel(roiLabels);
allData = zeros(nROIs, nROIs, nSub);
for i = 1:nSub
    d = load(fullfile(dataDir, files(i).name));
    matrix = d.(fn{1});
    allData(:, :, i) = matrix(1:nROIs, 1:nROIs);
end

% === Gruppenmittelwerte berechnen ===
meanGrpPlacebo = mean(allData(:, :, grp1_idx), 3);
meanGrpRTMS    = mean(allData(:, :, grp2_idx), 3);

% === 2-Stichproben-t-Test (rTMS vs. Placebo) ===
tMat = NaN(nROIs, nROIs);
pMat = NaN(nROIs, nROIs);
for i = 1:nROIs
    for j = 1:nROIs
        if i == j, continue; end
        x1 = squeeze(allData(i, j, grp2_idx)); % rTMS
        x2 = squeeze(allData(i, j, grp1_idx)); % Placebo
        [~, p, ~, stats] = ttest2(x1, x2);
        tMat(i, j) = stats.tstat;
        pMat(i, j) = p;
    end
end

% === FDR-Korrektur ===
fprintf('\nFDR-Korrektur (Benjamini-Hochberg)...\n');
mask_offdiag = true(nROIs, nROIs);
mask_offdiag(1:nROIs+1:end) = false;
vec_p = pMat(mask_offdiag);
fdr_vec_p = mafdr(vec_p, 'BHFDR', true);
pMat_FDR = NaN(size(pMat));
pMat_FDR(mask_offdiag) = fdr_vec_p;
sig_FDR_Mat = pMat_FDR < 0.05;
fprintf('Signifikante Verbindungen nach FDR: %d\n', nansum(sig_FDR_Mat(:)));

% === Visualisierung: Heatmaps ============================================

% Heatmap: t-Werte mit Umrandung
figure;
imagesc(tMat);
title('t-Werte mit Signifikanz-Umrandungen (rTMS - Placebo)');
colorbar;
xlabel('Ziel-ROI'); ylabel('Quell-ROI'); axis square;
set(gca, 'XTick', 1:nROIs, 'XTickLabel', roiLabels, 'XTickLabelRotation', 45);
set(gca, 'YTick', 1:nROIs, 'YTickLabel', roiLabels);
hold on;

% Rote Umrandung: FDR-signifikant
[rowFDR, colFDR] = find(sig_FDR_Mat);
for k = 1:length(rowFDR)
    rectangle('Position', [colFDR(k)-0.5, rowFDR(k)-0.5, 1, 1], ...
              'EdgeColor', 'red', 'LineWidth', 1.5);
end

% Schwarze Umrandung: unkorrekt signifikant, aber nicht FDR
[rowUnc, colUnc] = find((pMat < 0.05) & ~sig_FDR_Mat);
for k = 1:length(rowUnc)
    rectangle('Position', [colUnc(k)-0.5, rowUnc(k)-0.5, 1, 1], ...
              'EdgeColor', 'black', 'LineWidth', 1.5);
end

% Heatmap: Mittelwertsdifferenz (rTMS - Placebo), FDR-maskiert
diffMean = meanGrpRTMS - meanGrpPlacebo;
diffMean(~sig_FDR_Mat) = NaN;

figure;
imagesc(diffMean);
title('Mittelwertsdifferenz (rTMS - Placebo, FDR-signifikant)');
colorbar;
xlabel('Ziel-ROI'); ylabel('Quell-ROI'); axis square;
set(gca, 'XTick', 1:nROIs, 'XTickLabel', roiLabels, 'XTickLabelRotation', 45);
set(gca, 'YTick', 1:nROIs, 'YTickLabel', roiLabels);

% === Ergebnistabelle erstellen und speichern =============================
rows = []; cols = []; rtms_means = []; plac_means = []; ts = []; ps = []; qvals = []; signif = []; signifFDR = [];

for i = 1:nROIs
    for j = 1:nROIs
        if i == j, continue; end
        rows(end+1) = i;
        cols(end+1) = j;
        rtms_means(end+1) = meanGrpRTMS(i,j);
        plac_means(end+1) = meanGrpPlacebo(i,j);
        ts(end+1) = tMat(i,j);
        ps(end+1) = pMat(i,j);
        qvals(end+1) = pMat_FDR(i,j);
        signif(end+1) = pMat(i,j) < 0.05;
        signifFDR(end+1) = pMat_FDR(i,j) < 0.05;
    end
end

ROI_From = roiLabels(rows);
ROI_To   = roiLabels(cols);

resultsTable = table( ...
    ROI_From(:), ROI_To(:), rtms_means(:), plac_means(:), ts(:), ps(:), qvals(:), signif(:), signifFDR(:), ...
    'VariableNames', {'From','To','Mean_rTMS','Mean_Placebo','T','p','q_FDR','Significant_p<.05','Significant_FDR'});

disp(resultsTable(1:min(10, height(resultsTable)), :));

sortedTable = sortrows(resultsTable, 'p');
writetable(sortedTable, 'SeedToSeed_GroupDifference_rTMS_vs_Placebo.csv');
fprintf('\n📁 Tabelle gespeichert: SeedToSeed_GroupDifference_rTMS_vs_Placebo.csv\n');

signifOnly = sortedTable(sortedTable.Significant_FDR == 1, :);
writetable(signifOnly, 'SeedToSeed_SignificantOnly_FDR_GroupDiff.csv');
fprintf('📁 Nur FDR-signifikante Verbindungen gespeichert: SeedToSeed_SignificantOnly_FDR_GroupDiff.csv\n');

