clear;
clc;

% =========================== Pfade ============================
base_dir = 'F:\FMRIPREPRESULTFINAL';
roi_dir  = fullfile(base_dir, 'ROIs_2_mni2009cKopie');
plot_dir = fullfile(base_dir, 'ROI_Plots');
if ~exist(plot_dir, 'dir'), mkdir(plot_dir); end

subs = dir(fullfile(base_dir, 'sub-*'));
subs = subs([subs.isdir]);

% Alle ROI-Dateien laden
roi_files = dir(fullfile(roi_dir, '*_in_MNI2009c.nii'));

% Ergebnislisten initialisieren
all_results = [];
beta_table = table();  % Tabelle für Beta-Werte pro ROI/Bedingung/Block

for r = 1:numel(roi_files)
    roi_file = fullfile(roi_dir, roi_files(r).name);
    roi_name = erase(roi_files(r).name, '_in_MNI2009c.nii');

    fprintf('\n==============================\n');
    fprintf('ROI: %s\n', roi_name);
    fprintf('==============================\n');

    all_betas = [];
    sub_ids = {};

    for i = 1:numel(subs)
        sub = subs(i).name;
        spm_path = fullfile(base_dir, sub, 'ses-T1', 'FL_blöcke', 'SPM.mat');

        if ~exist(spm_path, 'file')
            warning('SPM.mat fehlt: %s', spm_path); continue;
        end

        try
            load(spm_path);
            names = SPM.xX.name;

            idx_bird = find(contains(names, 'bird'));
            idx_spider = find(contains(names, 'spider'));

            if numel(idx_bird) ~= 4 || numel(idx_spider) ~= 4
                warning('Nicht exakt 4 bird/spider Betas bei %s – übersprungen.', sub);
                continue;
            end

            betas = cellstr(spm_select('FPList', fileparts(spm_path), '^beta_.*\.nii$'));

            for b = 1:4
                beta_bird(b)   = spm_summarise(betas{idx_bird(b)}, roi_file, @mean);
                beta_spider(b) = spm_summarise(betas{idx_spider(b)}, roi_file, @mean);
            end

            all_betas(end+1,:) = [beta_bird beta_spider];
            sub_ids{end+1} = sub;

        catch ME
            warning('Fehler bei %s: %s', sub, ME.message);
        end
    end

    if isempty(all_betas)
        warning('Keine Daten für ROI %s vorhanden. Überspringe.', roi_name);
        continue;
    end

    all_betas_z = zscore(all_betas, 0, 2);

    % Habituation
    hab.bird   = all_betas(:,1) - all_betas(:,4);
    hab.spider = all_betas(:,5) - all_betas(:,8);
    hab_z.bird   = all_betas_z(:,1) - all_betas_z(:,4);
    hab_z.spider = all_betas_z(:,5) - all_betas_z(:,8);

    % Statistische Tests
    [~, p1, ~, s1] = ttest(hab.spider);
    [~, p2, ~, s2] = ttest(hab.bird);
    [~, p3, ~, s3] = ttest(hab.spider, hab.bird);

    [~, p1z, ~, s1z] = ttest(hab_z.spider);
    [~, p2z, ~, s2z] = ttest(hab_z.bird);
    [~, p3z, ~, s3z] = ttest(hab_z.spider, hab_z.bird);

    [~, p_block2, ~, stats_block2] = ttest(all_betas(:,6), all_betas(:,2));

    % Ergebnisse speichern
    result_row = {
        roi_name, ...
        s1.df, s1.tstat, p1, ...
        s2.df, s2.tstat, p2, ...
        s3.df, s3.tstat, p3, ...
        s1z.df, s1z.tstat, p1z, ...
        s2z.df, s2z.tstat, p2z, ...
        s3z.df, s3z.tstat, p3z, ...
        stats_block2.df, stats_block2.tstat, p_block2
    };

    all_results = [all_results; result_row];

    % =================== Plot: Verlauf über Blöcke ===================
    b_bird = all_betas(:,1:4);
    b_spider = all_betas(:,5:8);
    m_bird = mean(b_bird,1);
    m_spider = mean(b_spider,1);
    sem_bird = std(b_bird,0,1) ./ sqrt(size(b_bird,1));
    sem_spider = std(b_spider,0,1) ./ sqrt(size(b_spider,1));

    figure('Visible', 'off'); % kein GUI-Fenster anzeigen
    hold on;
    errorbar(1:4, m_bird, sem_bird, '-o', 'DisplayName','Bird');
    errorbar(1:4, m_spider, sem_spider, '-o', 'DisplayName','Spider');
    xlabel('Block');
    ylabel('Beta');
    title(sprintf('%s – Spider vs. Bird', strrep(roi_name, '_', '\_')));
    legend;
    xticks(1:4);
    grid on;

    % Grafik speichern
    fig_filename = fullfile(plot_dir, sprintf('%s_plot.png', roi_name));
    saveas(gcf, fig_filename);
    close(gcf);

    % =================== Beta-Tabelle für diese ROI ===================
    nSubs = size(all_betas, 1);
    tmp_table = table();
    row = 1;

    % Bedingung 'Bird'
    for b = 1:4
        tmp_table.ROI{row}       = roi_name;
        tmp_table.Condition{row} = 'Bird';
        tmp_table.Block(row)     = b;
        tmp_table.MeanBeta(row)  = mean(b_bird(:,b));
        tmp_table.StdBeta(row)   = std(b_bird(:,b));
        tmp_table.SEM(row)       = std(b_bird(:,b)) / sqrt(nSubs);
        row = row + 1;
    end

    % Bedingung 'Spider'
    for b = 1:4
        tmp_table.ROI{row}       = roi_name;
        tmp_table.Condition{row} = 'Spider';
        tmp_table.Block(row)     = b;
        tmp_table.MeanBeta(row)  = mean(b_spider(:,b));
        tmp_table.StdBeta(row)   = std(b_spider(:,b));
        tmp_table.SEM(row)       = std(b_spider(:,b)) / sqrt(nSubs);
        row = row + 1;
    end

    % Tabelle an Gesamttabelle anhängen
    beta_table = [beta_table; tmp_table];
end

% =================== Statistik-Tabelle speichern ===================
header = {
    'ROI', ...
    'df_hab_spider', 't_hab_spider', 'p_hab_spider', ...
    'df_hab_bird',   't_hab_bird',   'p_hab_bird', ...
    'df_diff',       't_diff',       'p_diff', ...
    'df_hab_spider_z', 't_hab_spider_z', 'p_hab_spider_z', ...
    'df_hab_bird_z',   't_hab_bird_z',   'p_hab_bird_z', ...
    'df_diff_z',       't_diff_z',       'p_diff_z', ...
    'df_block2',     't_block2',     'p_block2'
};

T = cell2table(all_results, 'VariableNames', header);
output_csv = fullfile(base_dir, 'Alle_ROI_Statistiken_T1.csv');
writetable(T, output_csv);
fprintf('\n>>> Alle Ergebnisse gespeichert in: %s\n', output_csv);
fprintf('>>> Alle Plots gespeichert in: %s\n', plot_dir);

% =================== Beta-Werte-Tabelle speichern ===================
output_beta_csv = fullfile(base_dir, 'Beta_Werte_Pro_Block_Pro_ROI.csv');
writetable(beta_table, output_beta_csv);
fprintf('>>> Beta-Tabelle gespeichert in: %s\n', output_beta_csv);
