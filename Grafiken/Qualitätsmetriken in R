# QC über alle fMRIPrep-Confounds (R / tidyverse)
# - 3 Klassen (OK / Kritisch / Ausschließen) auf Basis von Frame-Outliern
# - Flagging in FD95/DVARS95-Balkenplots (+ Mittelwert-Punkte)
# - Zusätzliche Klassifikation & Plots auf Basis von Mittelwerten (fd_mean, dvars_mean)
# - Kombiniertes FD & DVARS (95. Perzentil) mit Mittelwert-Punkten
# - Speichert alles in out_dir mit absoluten Pfaden (device = "png")
# -------------------------------------------------------------------------------------

library(tidyverse)
library(readr)
library(stringr)

# === Einstellungen ===
root_dir        <- "F:/FMRIPREPRESULTFINAL"          # dein Wurzelordner
out_dir         <- file.path(root_dir, "_qc_plots")  # Output-Ordner für alle Dateien
dir.create(out_dir, showWarnings = FALSE, recursive = TRUE)

fd_cut          <- 0.20   # Cutoff pro Frame (FD, mm)
dvars_cut       <- 2.0    # Cutoff pro Frame (DVARS vstd/std)
fd_mean_cut     <- 0.20   # Cutoff Mittelwert FD (mm)
dvars_mean_cut  <- 2.0    # Cutoff Mittelwert DVARS (vstd/std)

# === Hilfsfunktionen ===
parse_bids <- function(path) {
  fname <- basename(path)
  tibble(
    file = path,
    sub  = str_match(fname, "sub-([A-Za-z0-9]+)")[,2],
    ses  = str_match(fname, "ses-([A-Za-z0-9]+)")[,2],
    task = str_match(fname, "task-([A-Za-z0-9]+)")[,2],
    run  = str_match(fname, "run-([A-Za-z0-9]+)")[,2],
    dir  = str_match(fname, "dir-([A-Za-z0-9]+)")[,2]
  )
}

safe_quantile <- function(x, p) {
  x <- suppressWarnings(as.numeric(x))
  if (all(is.na(x))) return(NA_real_)
  as.numeric(quantile(x, p, na.rm = TRUE, names = FALSE))
}
safe_mean   <- function(x) { x <- suppressWarnings(as.numeric(x)); if (all(is.na(x))) NA_real_ else mean(x, na.rm = TRUE) }
safe_median <- function(x) { x <- suppressWarnings(as.numeric(x)); if (all(is.na(x))) NA_real_ else median(x, na.rm = TRUE) }
safe_pct_gt <- function(x, cut) {
  x <- suppressWarnings(as.numeric(x))
  if (all(is.na(x))) return(NA_real_)
  mean(x > cut, na.rm = TRUE) * 100
}

# Robust einlesen: "n/a" -> NA, kritische Spalten numerisch
read_confounds <- function(path) {
  df <- read_tsv(
    path,
    na = c("n/a", "NA", "NaN", "Inf", "-Inf"),
    show_col_types = FALSE,
    progress = FALSE
  )
  if (!"timepoint" %in% names(df)) df <- df %>% mutate(timepoint = row_number())
  num_cols <- intersect(c("framewise_displacement", "dvars_vstd", "std_dvars", "dvars"), names(df))
  df %>% mutate(across(all_of(num_cols), ~ suppressWarnings(as.numeric(.x))))
}

choose_dvars_col <- function(df) {
  if ("dvars_vstd" %in% names(df)) return("dvars_vstd")
  if ("std_dvars"  %in% names(df)) return("std_dvars")
  if ("dvars"      %in% names(df)) return("dvars")
  NA_character_
}

sum_outliers <- function(df) {
  mcols <- names(df)[str_detect(names(df), "^motion_outlier\\d+$")]
  if (length(mcols) == 0) return(0L)
  df %>%
    select(all_of(mcols)) %>%
    mutate(across(everything(), ~replace_na(suppressWarnings(as.numeric(.)), 0))) %>%
    rowSums() %>% sum(na.rm = TRUE)
}

# 3 Kategorien nach Anteil auffälliger Frames
classify_pct <- function(p) {
  case_when(
    is.na(p) ~ NA_character_,
    p < 5    ~ "OK (<5%)",
    p <= 40  ~ "Kritisch (5–40%)",
    p > 40   ~ "Ausschließen (>40%)"
  )
}

# === Dateien finden ===
files_tsv <- list.files(
  root_dir,
  pattern = "desc-confounds_timeseries\\.tsv(\\.gz)?$",
  recursive = TRUE,
  full.names = TRUE
)
stopifnot(length(files_tsv) > 0)

# === Einlesen & Aufbereiten ===
meta <- map_dfr(files_tsv, parse_bids)

all_runs <- pmap_dfr(list(meta$file, meta$sub, meta$ses, meta$task, meta$run, meta$dir),
  function(f, sub, ses, task, run, dir) {
    df <- read_confounds(f)

    if (!"framewise_displacement" %in% names(df)) df$framewise_displacement <- NA_real_
    dvars_col <- choose_dvars_col(df)
    df$.__dvars <- if (is.na(dvars_col)) NA_real_ else df[[dvars_col]]

    # Frame-Level Flags
    fd_flag    <- suppressWarnings(as.numeric(df$framewise_displacement) > fd_cut)
    dvars_flag <- suppressWarnings(as.numeric(df$.__dvars) > dvars_cut)
    fd_flag[is.na(fd_flag)]       <- FALSE
    dvars_flag[is.na(dvars_flag)] <- FALSE
    combo_flag <- fd_flag | dvars_flag

    pct_flagged <- if (length(combo_flag) == 0) NA_real_ else mean(combo_flag) * 100

    tibble(
      file = f,
      sub  = sub, ses = ses, task = task, run = run, dir = dir,
      n_vols       = nrow(df),
      fd_mean      = safe_mean(df$framewise_displacement),
      fd_median    = safe_median(df$framewise_displacement),
      fd_p95       = safe_quantile(df$framewise_displacement, 0.95),
      fd_pct_gt    = safe_pct_gt(df$framewise_displacement, fd_cut),
      dvars_col    = dvars_col,
      dvars_mean   = safe_mean(df$.__dvars),
      dvars_median = safe_median(df$.__dvars),
      dvars_p95    = safe_quantile(df$.__dvars, 0.95),
      dvars_pct_gt = safe_pct_gt(df$.__dvars, dvars_cut),
      pct_flagged  = pct_flagged,
      category     = classify_pct(pct_flagged),
      motion_outliers = sum_outliers(df)
    )
  })

# === Zusätzliche Klassifikation nach Mittelwerten ===
all_runs <- all_runs %>%
  mutate(
    category_mean = case_when(
      is.na(fd_mean) & is.na(dvars_mean)                  ~ NA_character_,
      fd_mean > fd_mean_cut | dvars_mean > dvars_mean_cut ~ "Kritisch (Mean)",
      TRUE                                                ~ "OK (Mean)"
    )
  )

# === Übersicht speichern ===
write_csv(all_runs, file.path(out_dir, "qc_summary_fmriprep_confounds.csv"))
message("QC-Übersicht gespeichert: ", file.path(out_dir, "qc_summary_fmriprep_confounds.csv"))

# === Plots ===
lab_run <- function(df) {
  df %>% mutate(run_label = paste0(
    "sub-", sub,
    ifelse(is.na(ses)  | ses  == "", "", paste0("_ses-", ses)),
    ifelse(is.na(task) | task == "", "", paste0("_task-", task)),
    ifelse(is.na(run)  | run  == "", "", paste0("_run-", run)),
    ifelse(is.na(dir)  | dir  == "", "", paste0("_dir-", dir))
  ))
}
plot_df <- lab_run(all_runs)

# Flags für Balkendiagramme (FD95 / DVARS95)
plot_df <- plot_df %>%
  mutate(
    flag_fd95    = !is.na(fd_p95)    & fd_p95    > fd_cut,
    flag_dvars95 = !is.na(dvars_p95) & dvars_p95 > dvars_cut
  )

# ---- Outlier-basierte Balkendiagramme (mit Flagging & Mittelwert-Punkt) ----
# FD 95. Perzentil + Punkt = FD-Mean
p_fd <- ggplot(plot_df, aes(reorder(run_label, fd_p95), fd_p95, fill = flag_fd95)) +
  geom_col() +
  geom_point(aes(y = fd_mean), shape = 21, color = "black", fill = "white", size = 1.8, stroke = 0.6) +
  geom_hline(yintercept = fd_cut, linetype = "dashed") +
  coord_flip() +
  labs(title = "FD 95. Perzentil pro Run",
       subtitle = "Punkt = FD-Mittelwert",
       x = "Run", y = "FD (mm)", fill = paste0("Flag (FD95 > ", fd_cut, " mm)")) +
  theme_minimal(base_size = 12) +
  scale_fill_manual(values = c(`FALSE` = "grey70", `TRUE` = "firebrick"))
ggsave(file.path(out_dir, "qc_plot_fd_p95_per_run.png"), p_fd,
       width = 11, height = 8, dpi = 150, device = "png")

# DVARS 95. Perzentil + Punkt = DVARS-Mean
p_dvars <- ggplot(plot_df, aes(reorder(run_label, dvars_p95), dvars_p95, fill = flag_dvars95)) +
  geom_col() +
  geom_point(aes(y = dvars_mean), shape = 21, color = "black", fill = "white", size = 1.8, stroke = 0.6) +
  geom_hline(yintercept = dvars_cut, linetype = "dashed") +
  coord_flip() +
  labs(title = "DVARS (vstd/std) 95. Perzentil pro Run",
       subtitle = "Punkt = DVARS-Mittelwert\n(Nutzt dvars_vstd > std_dvars > dvars, falls nötig)",
       x = "Run", y = "DVARS", fill = paste0("Flag (DVARS95 > ", dvars_cut, ")")) +
  theme_minimal(base_size = 12) +
  scale_fill_manual(values = c(`FALSE` = "grey70", `TRUE` = "firebrick"))
ggsave(file.path(out_dir, "qc_plot_dvars_p95_per_run.png"), p_dvars,
       width = 11, height = 8, dpi = 150, device = "png")

# % auffälliger Frames (Outlier-basiert) – 3 Kategorien
p_flag <- ggplot(plot_df, aes(reorder(run_label, pct_flagged), pct_flagged, fill = category)) +
  geom_col() +
  coord_flip() +
  labs(title = "Anteil auffälliger Frames pro Run",
       subtitle = paste0("Kombinierte Regel: FD >", fd_cut, " mm ODER DVARS >", dvars_cut),
       x = "Run", y = "% Frames", fill = "Kategorie (Outlier)") +
  theme_minimal(base_size = 12)
ggsave(file.path(out_dir, "qc_plot_pct_flagged_per_run.png"), p_flag,
       width = 12, height = 8, dpi = 150, device = "png")

# QC-Streudiagramm (FD vs. DVARS Median) – Outlier-Kategorien
p_fd_dvars_sub <- ggplot(plot_df, aes(x = fd_median, y = dvars_median, color = category)) +
  geom_point() +
  geom_hline(yintercept = dvars_cut, linetype = "dashed") +
  geom_vline(xintercept = fd_cut, linetype = "dashed") +
  facet_wrap(~ sub, scales = "free") +
  labs(title = "QC-Streudiagramm pro Subject (FD vs. DVARS)",
       x = "FD (Median, mm)", y = "DVARS (Median)", color = "Kategorie (Outlier)") +
  theme_minimal(base_size = 12)
ggsave(file.path(out_dir, "qc_scatter_fd_dvars_by_subject.png"), p_fd_dvars_sub,
       width = 12, height = 8, dpi = 150, device = "png")

# ---- Mittelwert-basierte Balkendiagramme (separat) ----
# FD Mean
p_fd_mean <- ggplot(plot_df, aes(reorder(run_label, fd_mean), fd_mean,
                                 fill = fd_mean > fd_mean_cut)) +
  geom_col() +
  geom_hline(yintercept = fd_mean_cut, linetype = "dashed") +
  coord_flip() +
  labs(title = "FD Mittelwert pro Run",
       x = "Run", y = "FD Mean (mm)",
       fill = paste0("Flag (FD Mean > ", fd_mean_cut, " mm)")) +
  theme_minimal(base_size = 12) +
  scale_fill_manual(values = c(`FALSE` = "grey70", `TRUE` = "firebrick"))
ggsave(file.path(out_dir, "qc_plot_fd_mean_per_run.png"), p_fd_mean,
       width = 11, height = 8, dpi = 150, device = "png")

# DVARS Mean
p_dvars_mean <- ggplot(plot_df, aes(reorder(run_label, dvars_mean), dvars_mean,
                                    fill = dvars_mean > dvars_mean_cut)) +
  geom_col() +
  geom_hline(yintercept = dvars_mean_cut, linetype = "dashed") +
  coord_flip() +
  labs(title = "DVARS Mittelwert pro Run",
       x = "Run", y = "DVARS Mean",
       fill = paste0("Flag (DVARS Mean > ", dvars_mean_cut, ")")) +
  theme_minimal(base_size = 12) +
  scale_fill_manual(values = c(`FALSE` = "grey70", `TRUE` = "firebrick"))
ggsave(file.path(out_dir, "qc_plot_dvars_mean_per_run.png"), p_dvars_mean,
       width = 11, height = 8, dpi = 150, device = "png")

# ---- Kombiniertes Balkendiagramm FD & DVARS (95. Perzentil) mit Mittelwert-Punkten ----
df_fd <- plot_df %>%
  transmute(run_label, metric = "FD", p95 = fd_p95, mean_value = fd_mean)
df_dv <- plot_df %>%
  transmute(run_label, metric = "DVARS", p95 = dvars_p95, mean_value = dvars_mean)
combined_df <- bind_rows(df_fd, df_dv)

pd <- position_dodge(width = 0.8)

p_combined <- ggplot(combined_df, aes(x = reorder(run_label, p95), y = p95, fill = metric)) +
  geom_col(position = pd) +
  geom_point(aes(y = mean_value), position = pd, shape = 21, color = "black", fill = "white", size = 1.8, stroke = 0.6) +
  geom_hline(yintercept = fd_cut, linetype = "dashed") +    # FD-Cut
  geom_hline(yintercept = dvars_cut, linetype = "dotted") + # DVARS-Cut
  coord_flip() +
  labs(title = "FD & DVARS – 95. Perzentil pro Run (mit Mittelwert-Punkten)",
       subtitle = "Balken: 95. Perzentil · Punkt: Mittelwert · Linien: FD (gestr.), DVARS (gepunktet)",
       x = "Run", y = "Wert", fill = "Metrik") +
  theme_minimal(base_size = 12)
ggsave(file.path(out_dir, "qc_plot_fd_dvars_p95_combined.png"), p_combined,
       width = 12, height = 8, dpi = 150, device = "png")

message("Plots gespeichert in: ", out_dir)
